package biz.pavonis;

import java.util.Map;

/**
 * Problem 12.
 * <pre>
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 +
 * 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 * </pre>
 * <pre>
 * Let d(n) be the number of divisors for the natural number, n.
 * d(n) = (a+1)(b+1)(c+1) where a, b, and c are the exponents of n's prime factors.
 */
public class Problem12 implements Solvable {

	@Override
	public long solve() {
		long ret = 0;
		boolean isFound = false;
		long counter = 2;
		long currNum = 1;
		while (!isFound) {
			long d = getNumberOfDivisors(currNum);
			System.out.println("Current number is " + currNum + ". Number of divisors is " + d + ". Counter is " + counter + ".");
			if (d >= 500) {
				ret = currNum;
				isFound = true;
			}
			currNum += counter;
			counter++;
		}
		return ret;
	}

	private long getNumberOfDivisors(long n) {
		long d = 1;
		Map<Long, Long> factors = ProblemUtil.getPrimeFactors(n);
		for (Long key : factors.keySet()) {
			d *= (factors.get(key) + 1);
		}
		return d;
	}
}
